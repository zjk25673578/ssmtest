<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 配置spring扫描器 -->
    <context:component-scan
            base-package="com.hanqi.service.impl"/>

    <!-- 引入数据库的信息文件 -->
    <context:property-placeholder location="classpath:db.properties" />
    <!--    <context:property-override
                location="classpath:db_orcl.properties"/>-->

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${dataSource.driverClassName}"/>
        <property name="url" value="${dataSource.url}"/>
        <property name="username" value="${dataSource.username}"/>
        <property name="password" value="${dataSource.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${dataSource.initialSize}" />
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${dataSource.maxActive}" />
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${dataSource.maxIdle}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${dataSource.minIdle}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${dataSource.maxWait}" />
    </bean>
    <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"
        p:username="${jdbc.username}" p:password="${jdbc.password}" p:url="${jdbc.url}"
        p:driverClassName="${jdbc.classname}" /> -->

<!--    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"/>-->

    <!-- mybatis核心构建类, 主要用来构建sqlSessionFactory 并且将映射文件全部扫描进来, 也可以在这里定义数据模型的别名
        如果写了mybatis的配置文件, 可以在这里引入, 使用p:configLocation="" -->
    <bean id="sqlSessionFactoryBean"
          class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource" p:typeAliasesPackage="com.hanqi.model"
          p:mapperLocations="classpath:mapper/*Mapper.xml"/>

    <!-- 扫面项目中所有的接口, 将会自动映射到上面扫描的映射文件中, 可以直接使用 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:sqlSessionFactoryBeanName="sqlSessionFactoryBean"
          p:basePackage="com.hanqi.dao"/>

    <!-- spring提供的数据库查询模版, 用得着就用, 用不着就放这 -->
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate"
          p:dataSource-ref="dataSource"/>

    <!-- 配置spring的事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- 开启声明式事务的注解 -->
    <tx:annotation-driven
            transaction-manager="transactionManager"/>

    <!-- 自定义的一个切面类 -->
    <bean id="logginAspect" class="com.hanqi.util.LogginAspect"/>

    <!-- AOP -->
    <aop:config proxy-target-class="true">
        <aop:pointcut
                expression="execution(* com.hanqi.service.*.*(..))" id="aoppointcut" />
        <!-- 关联事务的传播属性 -->
        <aop:advisor pointcut-ref="aoppointcut"
                     advice-ref="txadvice"/>
        <!-- 定义切面类的执行方法 -->
        <aop:aspect ref="logginAspect">
            <aop:after method="after" pointcut-ref="aoppointcut"/>
            <aop:before method="before"
                        pointcut-ref="aoppointcut"/>
            <aop:after-returning method="returnObject" returning="object"
                                 pointcut-ref="aoppointcut"/>
            <aop:after-throwing method="throwObject" throwing="exception"
                                pointcut-ref="aoppointcut"/>
        </aop:aspect>
    </aop:config>

    <tx:advice id="txadvice"
               transaction-manager="transactionManager">
        <!-- 配置事务的传播属性 -->
        <tx:attributes>
            <!-- 指定哪些方法使用事务 -->
            <tx:method name="insert*" propagation="REQUIRED"
                       read-only="false"/>
            <tx:method name="delete*" propagation="REQUIRED"
                       read-only="false"/>
            <tx:method name="update*" propagation="REQUIRED"
                       read-only="false"/>
            <tx:method name="select*" propagation="SUPPORTS"
                       read-only="true"/>
        </tx:attributes>
    </tx:advice>

</beans>
